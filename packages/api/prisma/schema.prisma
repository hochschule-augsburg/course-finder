generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

generator json {
  provider  = "prisma-json-types-generator"
  namespace = "PrismaJson"
  // clientOutput = "<finds it automatically>"
  // (./ -> relative to schema, or an importable path to require() it)
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  Student
  Professor
  User
  Admin
}

enum Singleton {
  Instance
}

model AppConf {
  id         Singleton @id @default(Instance)
  maxCredits Int       @default(30)
}

model User {
  // users have to be clean up every semester
  username String   @id
  email    String
  name     String
  Student  Student?
  /// [Auth]
  auth     Json
  type     UserRole
  //TODO: does not work with ldap
  /// [Otp]
  otp      Json?
  Course   Course[]

  lastActive DateTime @default(now())
}

model Student {
  username     String         @id
  User         User           @relation(fields: [username], references: [username], onDelete: Cascade)
  fieldOfStudy String
  term         Int?
  regNumber    String?
  StudentPhase StudentPhase[]
  faculty      String
}

model Course {
  moduleCode     String          @id
  /// [I18n]
  title          Json
  published      Boolean         @default(false)
  editor         User?           @relation(fields: [editorUsername], references: [username], onDelete: SetNull)
  editorUsername String?
  /// if lecturer is not in the system
  lecturers      String[]
  faculty        String
  exam           String?
  /// SWS
  semesterHours  Int
  /// CP
  creditPoints   Int
  varyingCP      Json?
  /// Url for optional iframe info
  infoUrl        String?
  pdf            Bytes?
  /// addition information about course could be relevant if there is not infoUrl
  extraInfo      String?
  offeredCourse  OfferedCourse[]
}

model Enrollphase {
  id                  Int             @id @default(autoincrement())
  start               DateTime
  end                 DateTime
  /// [I18n]
  title               Json
  /// [I18n]
  description         Json
  offeredCourses      OfferedCourse[]
  studentPhases       StudentPhase[]
  state               PhaseState      @default(NOT_STARTED)
  publishedTry        Int?
  /// time when the email is being sent if time is in the past no mail is sent
  emailNotificationAt DateTime        @default(dbgenerated("(NOW() - '30 days'::interval)"))
}

enum PhaseState {
  NOT_STARTED
  OPEN
  CLOSED
  DRAWING
  FINISHED
}

model OfferedCourse {
  Phase               Enrollphase     @relation(fields: [phaseId], references: [id], onDelete: Cascade)
  phaseId             Int
  Course              Course          @relation(fields: [moduleCode], references: [moduleCode], onDelete: Cascade)
  moduleCode          String
  minParticipants     Int             @default(0)
  maxParticipants     Int?
  hideMinParticipants Boolean         @default(false)
  StudentChoice       StudentChoice[]

  extraInfo            String?
  moodleCourse         String?
  externalRegistration Boolean           @default(false)
  /// Array of fields of study
  for                  String[]
  /// [CourseAppointments]
  appointments         Json
  PhaseAssignment      PhaseAssignment[]

  @@id([phaseId, moduleCode])
}

model StudentPhase {
  Student       Student         @relation(fields: [username], references: [username], onDelete: Cascade)
  username      String
  Phase         Enrollphase     @relation(fields: [phaseId], references: [id], onDelete: Cascade)
  phaseId       Int
  StudentChoice StudentChoice[]

  creditsNeeded    Int
  PhaseAssignments PhaseAssignment[]
  createdAt        DateTime          @default(now())

  @@id([username, phaseId])
}

model StudentChoice {
  OfferedCourse OfferedCourse @relation(fields: [moduleCode, phaseId], references: [moduleCode, phaseId], onDelete: Cascade)
  moduleCode    String
  phaseId       Int
  StudentPhase  StudentPhase  @relation(fields: [username, phaseId], references: [username, phaseId], onDelete: Cascade)
  username      String

  points Int

  @@id([moduleCode, username, phaseId])
}

model PhaseAssignment {
  tryNo         Int
  phaseId       Int
  username      String
  StudentPhase  StudentPhase  @relation(fields: [username, phaseId], references: [username, phaseId], onDelete: Cascade)
  offeredCourse OfferedCourse @relation(fields: [phaseId, moduleCode], references: [phaseId, moduleCode], onDelete: Cascade)
  moduleCode    String

  @@id([phaseId, tryNo, username, moduleCode])
}
