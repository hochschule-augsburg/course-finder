generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

generator json {
  provider = "prisma-json-types-generator"
  // namespace = "PrismaJson"
  // clientOutput = "<finds it automatically>"
  // (./ -> relative to schema, or an importable path to require() it)
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  // users have to be clean up every semester
  username    String   @id
  email       String
  name        String
  Student     Student?
  Prof        Prof?
  /// [Auth]
  auth        Json
  type        String
  Faculty     Faculty  @relation(fields: [facultyName], references: [name])
  facultyName String
}

model Student {
  username      String          @id
  User          User            @relation(fields: [username], references: [username])
  fieldOfStudy  String
  term          Int?
  regNumber     String?
  StudentChoice StudentChoice[]
}

model Prof {
  username  String   @id
  User      User     @relation(fields: [username], references: [username])
  telephone String?
  office    String?
  Module    Course[]
}

model Faculty {
  name           String   @id
  /// [I18n]
  translatedName Json
  Courses        Course[]
  Users          User[]
}

model Course {
  moduleCode         String           @id
  /// title module
  /// [I18n]
  title              Json
  published          Boolean          @default(false)
  examinationNumbers String[]
  Lecturers          Prof[]
  /// if lecturer is not in the system
  lecturerNames      String[]
  requirements       String[]
  /// spoken language
  language           String
  Faculty            Faculty?         @relation(fields: [facultyName], references: [name])
  facultyName        String?
  /// SWS
  semesterHours      Int
  /// CP
  creditPoints       Int
  timeDistribution   String?
  /// [ExamType]
  examType           Json
  /// [I18n]
  description        Json
  /// [I18n]
  learningGoals      Json
  literature         String[]
  /// Link to the moodle course
  moodleCourse       String?
  website            String?
  offeredCourse     OfferedCourse?
}

model Enrollphase {
  id             Int              @id @default(autoincrement())
  start          DateTime
  end            DateTime
  /// [I18n]
  title          Json
  /// [I18n]
  description    Json
  offeredCourses OfferedCourse[]
}

model OfferedCourse {
  id              Int             @id @default(autoincrement())
  Phase           Enrollphase     @relation(fields: [phaseId], references: [id])
  phaseId         Int
  Course          Course          @relation(fields: [moduleCode], references: [moduleCode])
  moduleCode      String          @unique
  StudentChoices   StudentChoice[]
  minParticipants Int?
  maxParticipants Int?

  extraInfo String?
  /// [courseAppointment]
  appointments    Json

  @@unique([phaseId, moduleCode])
}

model StudentChoice {
  id              Int            @id @default(autoincrement())
  Student         Student        @relation(fields: [studentId], references: [username])
  studentId       String
  OfferedCourse   OfferedCourse @relation(fields: [offeredCourseId], references: [id])
  offeredCourseId Int

  points     Int
  lastChange DateTime

  @@unique([studentId, offeredCourseId])
}
