generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

generator json {
  provider = "prisma-json-types-generator"
  // namespace = "PrismaJson"
  // clientOutput = "<finds it automatically>"
  // (./ -> relative to schema, or an importable path to require() it)
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// This model is completely separate from ldap as the admin could be extern
model Admin {
  email    String @id
  username String
  name     String
  /// hashed password
  password String
}

model Student {
  email         String          @id // id because people with same name get a number
  username      String // not unique as one can take the username of an old student
  name          String
  fieldOfStudy  String
  semester      Int?
  regNumber     String?
  TwoFA         Json?
  StudentChoice StudentChoice[]
}

model Prof {
  email     String   @id // id because people with same name get a number
  username  String // not unique as one can take the username of an old student
  name      String
  telephone String?
  office    String?
  faculty   Faculty  @relation(fields: [facultyId], references: [id])
  facultyId Int
  Module    Module[]
}

model Faculty {
  id      Int      @id @default(autoincrement())
  name    String
  modules Module[]
  Prof    Prof[]
}

model Module {
  moduleCode         String           @id
  /// title module
  /// [I18n]
  title              Json
  published          Boolean          @default(false)
  examinationNumbers String[]
  lecturers          Prof[]
  /// if lecturer is not in the system
  lecturerNames      String[]
  requirements       String[]
  /// spoken language
  language           String
  faculty            Faculty?         @relation(fields: [facultyId], references: [id])
  facultyId          Int?
  /// SWS
  semesterHours      Int
  /// CP
  creditPoints       Int
  timeDistribution   String?
  /// [ExamType]
  examType           Json
  /// [I18n]
  description        Json
  /// [I18n]
  learningGoals      Json
  literature         String[]
  /// Link to the moodle course
  moodleCourse       String?
  website            String?
  offeredCourses     OfferedCourses[]
}

model Enrollphase {
  id             Int              @id @default(autoincrement())
  start          DateTime
  end            DateTime
  /// [I18n]
  title          Json
  /// [I18n]
  description    Json
  offeredCourses OfferedCourses[]
}

model OfferedCourses {
  id            Int             @id @default(autoincrement())
  phase         Enrollphase     @relation(fields: [phaseId], references: [id])
  phaseId       Int
  module        Module          @relation(fields: [moduleCode], references: [moduleCode])
  moduleCode    String
  StudentChoice StudentChoice[]

  @@unique([phaseId, moduleCode])
}

model StudentChoice {
  id              Int            @id @default(autoincrement())
  student         Student        @relation(fields: [studentId], references: [email])
  studentId       String
  offeredCourse   OfferedCourses @relation(fields: [offeredCourseId], references: [id])
  offeredCourseId Int

  points     Int
  lastChange DateTime

  @@unique([studentId, offeredCourseId])
}
